generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Comments {
  id          Int      @id(map: "Comments_pk") @default(autoincrement())
  userId      Int
  postId      Int
  description String
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  Users       Users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "comments_fk0")
  Posts       Posts    @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "comments_fk1")
}

model Post_type {
  id    Int     @id(map: "Post_type_pk") @default(autoincrement())
  type  String
  Posts Posts[]
}

model Posts {
  id          Int        @id(map: "Posts_pk") @default(autoincrement())
  userId      Int
  type        Int
  description String
  createdAt   DateTime   @default(now()) @db.Timestamp(6)
  updatedAt   DateTime   @default(now()) @db.Timestamp(6)
  imageUrl    String?
  title       String     @db.VarChar(100)
  Comments    Comments[]
  Users       Users      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "posts_fk0")
  Post_type   Post_type  @relation(fields: [type], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "posts_fk1")
}

model Relationship {
  id                                   Int   @id(map: "Relationship_pk") @default(autoincrement())
  followerId                           Int
  followedId                           Int
  Users_Relationship_followerIdToUsers Users @relation("Relationship_followerIdToUsers", fields: [followerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "relationship_fk0")
  Users_Relationship_followedIdToUsers Users @relation("Relationship_followedIdToUsers", fields: [followedId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "relationship_fk1")
}

model Session {
  id        Int      @id(map: "Session_pk") @default(autoincrement())
  userId    Int
  token     String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  Users     Users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "session_fk0")
}

model Userdata {
  id         Int    @id(map: "Userdata_pk") @default(autoincrement())
  userId     Int
  adress     String @db.VarChar(100)
  occupation String @db.VarChar(100)
  photoUrl   String @db.VarChar(100)
  Users      Users  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userdata_fk0")
}

model Users {
  id                                          Int            @id(map: "Users_pk") @default(autoincrement())
  email                                       String         @db.VarChar(100)
  password                                    String         @db.VarChar(100)
  username                                    String         @db.VarChar(100)
  createdAt                                   DateTime       @default(now()) @db.Timestamp(6)
  updatedAt                                   DateTime       @default(now()) @db.Timestamp(6)
  Comments                                    Comments[]
  Posts                                       Posts[]
  Relationship_Relationship_followerIdToUsers Relationship[] @relation("Relationship_followerIdToUsers")
  Relationship_Relationship_followedIdToUsers Relationship[] @relation("Relationship_followedIdToUsers")
  Session                                     Session[]
  Userdata                                    Userdata[]
}
